General
	from . import ... : import from same directory
	NGINX, PostgreSQL, gunicorn?
	Server with Flask app?
	SSL

Project structure
	create project
		django-admin startproject myproject
	myproject : project container
		manage.py
		myproject : project app
			settings.py
			urls.py
			wsgi.py
			__init__.py
		personal : custom app
			static/personal : enable relative reference
			templates/personal
		app1
		app2
		...

Steps
	App
		create : python manage.py startapp ...
		register : ~/myproject/myproject/
			settings.py : INSTALLED_APPS
			urls.py : urlpatterns
		code stuff
	Model
		python manage.py migrate
		register to admin

manage.py
	Project management utility
		windows : python manage.py ...
		linux : ./manage.py ...
	runserver ... : starts server
	startapp ... : create app
	makemigrations, migrate, sqlmigrate : database
	createsuperuser : for admin

View
	Pure HttpResponse
		from django.http import HttpResponse
		def index(request):
			return HttpResponse("<h2>Hello Django!!</h2>")
	HttpResponse with render templates
		from django.http import HttpResponse
        from django.template import loader
        from .models import Album
        def index(request):
            album_list = Album.objects.all()
            template = loader.get_template("music/index.html")
            return HttpResponse(template.render({"album_list": album_list}, request))
    Shortcut render templates
        from django.shortcuts import render
        from .models import Album
        def index(request):
            album_list = Album.objects.all()
            data = {
                "album_list": album_list,
            }
            return render(request, "music/index.html", {"album_list": album_list})

Generic views
        from django.views import generic
        from datetime import date as d
        from .models import Album
    ListView : list of objects
        url.py
            urlpatterns = [url(r'^$', views.IndexView.as_view(), name="index"),]
        views.py
            class IndexView(generic.ListView):
                template_name = "music/index.html"
                context_object_name = "albums"
                model = Album
    DetailView : info about an object, object primary key
        url.py
            urlpatterns = [url(r'^(?P<pk>[0-9]+)/$', views.DetailView.as_view(), name="detail"),]
        views.py
            class DetailView(generic.DetailView):
                template_name = "music/detail.html"
                model = Album
    CreateView : create & save an object, form
        url.py
            urlpatterns = [url(r'^album/add/$', views.AlbumCreateView.as_view(), name="add_album"),]
        views.py
            class AlbumCreateView(generic.edit.CreateView):
                model = Album
                fields = ["artist", "title", "genre", "logo"]
        models.py : pass primary key of created object, auto date
            class Album(models.Model):
                ...
                date = models.DateField(auto_now_add=True)
                def get_absolute_url(self):
                    return reverse('music:detail', kwargs={'pk': self.pk})

Static
	Setting : ~/myproject/myproject/settings.py
		add static path, STATIC_ROOT
	Collect
		./manage.py collectstatic			
	Use
		{% load staticfiles %}
		<link href="{% static 'personal/css/bootstrap.min.css' %}" rel="stylesheet">

Model
	Overview
		Database schema, ORM?
		Migrate when change in model
		class = table, class variables = table columns
	Migration
		update db, on model(db schema) change always migrate
		makemigrations : prepare update
		migrate : commit update
		sqlmigrate : simulate update
	Column type
		models.CharField(max_length=...)
		TextField()
		DateTimeField
		ForeignKey() : Primary key of another table
	Code : ~/mysite/music/models.py
		from django.db import models
		class Album(models.Model):
			artist = models.CharField(max_length=250)
			title = models.CharField(max_length=500)
			genre = models.CharField(max_length=100)
			logo = models.CharField(max_length=1000)
		class Song(models.Model):
			album = models.ForeignKey(Album, on_delete=models.CASCADE)
			type = models.CharField(max_length=10)
			title = models.CharField(max_length=250)
	DB access : manual (python manage.py shell)
    	from music.models import Album, Song
		from datetime import date as d
		# insert
		a1 = Album(artist="Taylor Swift", title="Red", genre="Country", logo="", date=d.today())
		a2 = Album()
		a2.artist = "Myth"
		a2.title = "High School"
		a2.genre = "Punk"
		a2.logo = ""
		a2.date = d.today()
		# commit
		a1.save()
		a2.save()
		# read
		Album.objects.all()
		Album.objects.filter(id=1)
		Album.objects.filter(artist__startswith="Tayler")
		album1 = Album.objects.filter(pk=1).get()
        song1 = Song(album=album1, type='mp3', title='I hate my boyfriend', date = d.today())
        song1.save()
        album1.song_set.all()
        album1.song_set.create(title="I love bacon", type="mp3", date=d.today())

    Admin : DB access GUI
        access : create Admin/superuser account
            python mange.py createsuperuser
        register : ~/mysite/music/admin.py
            from .models import Album, Song
            admin.site.register(Album)
            admin.site.register(Song)

Template
    Dynamic url
        url.py : ~mysite/music/
            urlpatterns = [
                url(r'^$', views.index, name="index"),  # /
                url(r'^(?P<album_id>[0-9]+)/$', views.detail, name="detail"),  # /'id'/
            ]
         detail.html : ~mysite/music/templates/music
            <a href="{% url 'detail' album.id %}"></a>

Namespace
    Define at app or controller
    App : ~mysite/music/url.py
        app_name = "ns_music"
    Controller : ~mysite/mysite/url.py
        urlpatterns = [
            ...
            url(r'^music/', include("music.urls", namespace="ns_music")),
        ]
    Template : .html
        {% url 'ns_music:detail' album.id %}

Error handling, views.py
        from django.shortcuts import render, get_object_or_404
        from django.http import HttpResponse, Http404
    Http404 : return error
        def detail(request, album_id):
            try:
                album = Album.objects.filter(pk=album_id).get()
            except Album.DoesNotExist:
                raise Http404("Album does not exist!")
            return render(request, "music/detail.html", {"album": album})
    get_object_or_404 : get object + Http404
        def detail(request, album_id):
            album = get_object_or_404(Album, pk=album_id)
            return render(request, "music/detail.html", {"album": album})

Form
    Normal : request
        url.py
            urlpatterns = [url(r'^(?P<pk>[0-9]+)/favorite/$', views.favorite, name="favorite"),]
        html
            <form action="..." method="post">
                {% csrf_token %}
                <input type="text" name="song" ...">
                <input type="submit" ...>
            </form>
         views.py
            def favorite(request, pk):
                ...song = request.POST["song"]...
     Model form : prebuilt, has validation logic

Hosting
	https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04
	Default setup (same as Flask)
		Default Python3 VirtualEnvironment 
	Django (in venv)
		~/myproject/myproject/settings.py
			add host, ALLOWED_HOSTS
			add static path, STATIC_ROOT
		migrate model (makemigration, migrate)
		collect static
		create super user
	Apache2
		/etc/apache2/sites-available/DjangoApp.conf
			add app info
			a2ensite DjangoApp
		~/myproject/myproject/wsgi.py
			add virtualenviroment logic
	DB permissions (mysql?)