General
	from . import ... : import from same directory
	NGINX, PostgreSQL, gunicorn?
	Server with Flask app?
	SSL

Project structure
	create project
		django-admin startproject myproject
	myproject : project container
		manage.py
		myproject : project app
			settings.py
			urls.py
			wsgi.py
			__init__.py
		personal : custom app
			static/personal : enable relative reference
			templates/personal
		app1
		app2
		...

Steps
	App
		create : python manage.py startapp ...
		register : ~/myproject/myproject/
			settings.py : INSTALLED_APPS
			urls.py : urlpatterns
		code stuff
	Model
		python manage.py migrate
		register to admin

manage.py
	Project management utility
		windows : python manage.py ...
		linux : ./manage.py ...
	runserver ... : starts server
	startapp ... : create app
	makemigrations, migrate, sqlmigrate : database
	createsuperuser : for admin

View
	HttpResponse
		from django.http import HttpResponse
		def index(request):
			return HttpResponse("<h2>Hello Django!!</h2>")
	render
		from django.shortcuts import render
		def home(request):
			return render(request, 'personal/home.html')		

Static
	Setting : ~/myproject/myproject/settings.py
		add static path, STATIC_ROOT
	Collect
		./manage.py collectstatic			
	Use
		{% load staticfiles %}
		<link href="{% static 'personal/css/bootstrap.min.css' %}" rel="stylesheet">

Model
	Overview
		Database schema, ORM?
		Migrate when change in model
		class = table, class variables = table columns
	Migration
		update db, on model change always migrate
		makemigrations : prepare update
		migrate : commit update
		sqlmigrate : simulate update
	Column type
		models.CharField(max_length=...)
		TextField()
		DateTimeField
		ForeignKey() : Primary key of another table
	Code : ~/mysite/music/models.py
		from django.db import models
		class Album(models.Model):
			artist = models.CharField(max_length=250)
			title = models.CharField(max_length=500)
			genre = models.CharField(max_length=100)
			logo = models.CharField(max_length=1000)
		class Song(models.Model):
			album = models.ForeignKey(Album, on_delete=models.CASCADE)
			type = models.CharField(max_length=10)
			title = models.CharField(max_length=250)
	DB access : manual (python manage.py shell)
		from datetime import date as d
		# insert
		a1 = Album(artist="Taylor Swift", title="Red", genre="Country", logo="", date=d.today())
		a2 = Album()
		a2.artist = "Myth"
		a2.title = "High School"
		a2.genre = "Punk"
		a2.logo = ""
		a2.date = d.today()
		# commit
		a1.save()
		a2.save()
		# read
		Album.objects.all()
		Album.objects.filter(id=1)
		Album.objects.filter(artist__startswith="Tayler")
    Admin : DB access GUI
        access : create Admin/superuser account
            python mange.py createsuperuser
        register : ~/mysite/music/admin.py
            from .models import Album, Song
            admin.site.register(Album)
            admin.site.register(Song)

Hosting
	https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-apache-and-mod_wsgi-on-ubuntu-16-04
	Default setup (same as Flask)
		Default Python3 VirtualEnvironment 
	Django (in venv)
		~/myproject/myproject/settings.py
			add host, ALLOWED_HOSTS
			add static path, STATIC_ROOT
		migrate model (makemigration, migrate)
		collect static
		create super user
	Apache2
		/etc/apache2/sites-available/DjangoApp.conf
			add app info
			a2ensite DjangoApp
		~/myproject/myproject/wsgi.py
			add virtualenviroment logic
	DB permissions (mysql?)