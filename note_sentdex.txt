print
	print('Hi '+str(5))
	print('''
	This is a simple
	multi-line print
	pretty cool!
	''')

	
while loop
	condition = 1
	while condition < 10:
	    	print (condition)
    		condition += 1
for loop
	for x in range(1,11):
   		print(x)
if
	x = 5
	y = 8
	z = 5
	a = 3
	if z < y > x > a:
  		print('y is greater than z and greater than x and a')
	list = ['This', 'is', 'a', 'sentence','.']
	if '.' in list:
		print('correct')
	else:
		print('no period')
if else
	x = 5
	y = 8
	if x > y:
 		print('x > y')
	else:
  		print('x < y')
if elsif else
	x = 5
	y = 10
	z = 22

	if x > y:
  		print('x > y')
	elif x < z:
		print('x < z')
	elif 5 > 2:
		print('this is true')
	else:
  		print('no if elif run')
function
	def example():
 		print('basic function')
		z = 3+9
		print(z)
	example()
function parameter
	def simple_sub(num1,num2):
		answer = num1 - num2
		print(num1,'-',num2,'=',answer)
	simple_sub(3,5)
	simple_sub(num1=5,num2=3)
function parameter default
	def simple(num1,num2=5):
		print(num1,num2)
	simple(3)
global, local variable
	x = 6
	y = 11
	def example():
		z = 5
		print('z=',z)
		global x
		x += 1
		print('x=',x)
	example()
file write
	text = 'Sample Text to Save\nNew line!'
	saveFile = open('exampleFile.txt','w')
	saveFile.write(text)
	saveFile.close()
file append
	appendMe = '\nNew bit of information'
	saveFile = open('exampleFile.txt','a')
	saveFile.write(appendMe)
	saveFile.close()
file read
	saveFile = open('exampleFile.txt','r')
	rd = saveFile.readlines()
	saveFile.close()
	print(rd)
class
	class calculator:
		def add(x,y):
			result = x+y
			print(result)
		def sub(x,y):
			result = x-y
			print(result)
		def mult(x,y):
			result = x*y
			print(result)
		def div(x,y):
			result = x/y
			print(result)
	calculator.mult(3,5)
	calculator.sub(5,13)
	calculator.div(1,3)
user input
	x = input ('What is your name? ')
module
	install
		http://www.lfd.uci.edu/~gohlke/pythonlibs/
		pip install ...
	import
		import statistics as s
		from statistics import median, stdev as d, variance as v
	create
		module is a python script with functions defined
		module file must be in Lib Lib/site-packages or path defined folder, else import don't work
		use if __name__ == '__main__' for excluding code when used as module
List, Tuple, Dictionary, Zip
	List : array that can be manupilated
	Tuple : array that is immutable, can't be changed, handle data fast
		x = (1,2,3), tuple
		y = [4,5,6], list
		y[0] -> 4
		x[2] -> 3
	Dictionary : similar to Map in Java , has key and object pairs
		exDict = {'Jack':15,'Alice':12,'Bob':22,'Kevin':17}
	Zip : grouped lists with index matched
		in for loop drops left overs
		names = ['Jessica', 'Daniel', 'Edward', 'Oscar', 'Henry']
		ages = ['15', '27', '77', '102']
		personDict2 = {a:b for a,b in zip(names,ages)}
		            = {'Jessica': '15', 'Daniel': '27', 'Edward': '77', 'Oscar': '102'}
CSV
	Code
		import csv
		with open('s28.csv') as csvfile:
    			readCSV = csv.reader(csvfile, delimiter=',')
	Note
		when file is used, can't use?
Error Handling
	try:
		...
	except Exception as e:
		...
		print(e)
Built-in functions
	help() : interactive help guide
		https://docs.python.org/3/library/functions.html
	abs() min() max() round() str() int() float()
Standard modules
	os
		file manipulation
		path:getcwd()
		listdir() mkdir() makedirs() rename() rmdir() system()
	sys
		operating system command related?
		can used to communicate between programs of different language
		stderr.write() stdout.write() argv
	urllib
		internet access
		access block
			servers may block connections for protection and efficiency
			can bypass by using fake User-Agent but not recommended
			use provided API
		code
			import urllib.request, urllib.parse
			url = '...', site address
			values = {..}, post parameters
			myheaders = {}
			myheaders['User-Agent'] = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17'
			data = urllib.parse.urlencode(values)
			data = data.encode('utf-8')
			req = urllib.request.Request(url, data, headers=myheaders)
			resp = urllib.request.urlopen(req)
			respData = resp.read()
	re
		regular expression for parsing string, need practice
		* vs *? : need to think over greedy vs non-greedy counts
		findall()
	tkinter
		gui creation
		tkinter is wrapper around tk which is wrapper around tcl
		Window Button Menu Event Image Text
	subprocess
		access shell commands
		can used to communicate between programs of different language
		complement of sys module?
		call() check_output()
		
Thread
	multiple processing