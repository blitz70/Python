intro
	from flask import Flask
	app = Flask(__name__)
	...
	routed functions
	...
	if __name__ == '__main__':
		app.run(debug=True)

routing : link url to a function, for forms add post method
	@app.route('/author')
	def author():
    		return '<h2>Blitz love Python!</h2>'
	@app.route('/login/', methods=["GET","POST"])
	def login_page():
    		return render_template("login.html")

error handling
	@app.errorhandler(404)
	def error_404(error):
		return render_template('error.html', error = error, error_msg = "Opps that page doesn't exist.")

passing variables : url with variable
	@app.route('/post/<int:post_id>')
	def post(post_id):
		return "This is the contend of post {}".format(post_id)

HTTP request : object sent by user browser to server
	request.method : post, get
		@app.route('/methods', methods=['GET', 'POST'])
		def methods():
			if request.method == 'POST':
				return "Your request method is POST"
			else:
				return "Your request method is GET"
	request.args : parameters
		@app.route('/_background_process/')
		def _background_process():
			proglang = request.args.get('proglang')
			if 'python' in str(proglang).lower():
				return jsonify(answer='You are wise!(server)')
			else:
				return jsonify(answer='Try again (server)')
				
Redirect : sending user to another URL
	from flask import Flask, redirect, url_for
	@app.route('/jumped/')
	def landed():
		return 'I jumped!'
	@app.route('/jump/')
	def jump_page():
		return redirect(url_for('landed'))

HTML files
	code
		from flask import Flask, render_template
		@app.route('/profile/<name>')
		def profile(name):
			return render_template("profile.html", name=name)
	templates/profile.html
		<!DOCTYPE html>
		<title>{{name}}'s home</title>
		<link rel="stylesheet" type="text/css" href="{{url_for('static', filename='style.css')}}">
		<h1>{{name}}</h1>
		<h2>Welcome back!</h2>
	static/style.css
		h2 {color: deepskyblue;}
	HTML scripting
		{{ ... }} : variable passed from python to html
		{% ... %} : Python code in html
			{% if ... %}
			...html...
			{% else %}
			{% endif %}
			{% for ... %}
			...html...
			{% endfor %}
			{% with ... %}
			{% endwith %}
	Page extensions/inheritance
		Get other page add extra and use it as current page
		{% extends 'parent.html' %} : get and use parent.html template as child template
		{% block body %} : use parent code before block
		child html : use child code within block
		{% endblock %} : use parent code after block
	Page includes
		Insert another page into current page
		{% include 'includes.html' %}

Bootstrap
	Front end, CSS & JavaScript framework by Twitter
	Used to spice up webpage
	Include jQuery and bootstrap javascript
	http://getbootstrap.com
	navbar button glyphicon modal video picture nav-tabs alert

Flash
	.py
		flash('message to display')
	.html
		{% with flash_msgs = get_flashed_messages() %}
		{% if flash_msgs %}
		{% for msg in flash_msgs%}
		{{ msg }}
		{% endfor%}
		{% endif%}
		{% endwith %}

Jinja
	HTML rendering engine
	http://jinja.pocoo.org/docs/2.9/templates/
	filters macros logic		

URL converters
	Dynamic routing
	https://exploreflask.com/en/latest/views.html#built-in-converters
	Code
		@app.route('/converters2/')
		@app.route('/converters2/<path:urlpath>/')
		def converters2(urlpath='this/is/a/directory'):
			return render_template('part2/converters.html', urlpath=urlpath, root_path=root_path)
		@app.route('/converters3/<string:article>/<int:page>/')
		def converters3(article='chapter1', page=1):
			return render_template('part2/converters.html', article=article, page=page, root_path=root_path)

Custom decorators
	Used to enforce some requirements, made using a wrapper
	Login requirement
		def login_required(f):
			@wraps(f)
			def wrap(*args, **kwargs):
				if session['logged'] is True:
					return f(*args, **kwargs)
				else:
					# failed logic
			return wrap
		@app.route('/private/')
		@login_required
		def private():
			...	
	Special requirement
		def secret(f):
			@wraps(f)
			def wrap(*args, **kwargs):
				if session['user'] == 'blitz':
					return f(*args, **kwargs)
				else:
					# failed logic
			return wrap
		@app.route("/protected/")
		@secret
		def protected():
			...			
			
File transfer
	send file from server to user
	can send any file at any place in server (limit?)
	not sure about difference of two functions
	send_file(), send_from_directory()

To do later
	Paypal
	SSL : need registered domain name

Hosting
	Tools
		PuTTY, Win-SCP
	Note
		File encoding : utf-8
		Win-SCP permission
			Advanced-Environment-SCP/Shell-Shell sudo su -
		Code change server auto reload
			app.config.update(TEMPLATES_AUTO_RELOAD = True)
		Routing
			End URL with '/' : accepts URL request both with or without ending '/'
			Multi routing : can route multiple URL to same function
		Import
			When importing modules add '.' infront of module name
		pip
			pip search ...
		gc
			use gc.collect() to enforce server memory management
		Cron
			Server scheduler, performs commands automatically
			crontab -e : edit setup file
			0 */12 * * * means every 5hrs (0 0,12 * * *)
		service apache2 reload vs restart
			reload : faster, configuration update while keeping server running 
			restart : slower, server stop -> start
		Chrome : shift+F5, reload chrome ignore cache
	Default
		sudo apt-get update
		sudo apt-get upgrade
		sudo apt-get install apache2 mysql-client mysql-server
	Python3
		sudo apt-get install python3 python3-pip libapache2-mod-wsgi-py3
		sudo ln -s /usr/bin/python3 /usr/bin/python
		sudo a2enmod wsgi
	Virtual environment
		Used when python app uses differnet python/module versions
		Setup : in project directory /var/www/FlaskApp/FlaskApp/
			sudo pip3 install virtualenv
			sudo virtualenv venv
			sudo chown -R ubuntu:ubuntu venv
		Install packages/modules in venv
			source venv/bin/activate
			pip3 install ...
			deactivate
	Flask-local : check Flask working in venv
		Files
			/var/www/FlaskApp/FlaskApp
				static/ templates/ __init__.py
		python __init__.py
	Flask-web : when Flask-local works
		Files
			/etc/apache2/sites-available/FlaskApp.conf
			/var/www/FlaskApp/flaskapp.wsgi
		sudo service apache2 restart
		check public ip on browser
	MySQL : database for storing data
		Login : sudo mysql -u root -p
		Reset root password
			https://support.rackspace.com/how-to/mysql-resetting-a-lost-mysql-root-password/
		DB
			SHOW DATABASES;
			CREATE DATABASE pythonprogramming;
			USE pythonprogramming
			CREATE TABLE users (uid INT(11) AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20), password VARCHAR(100), email VARCHAR(50), settings VARCHAR(32500), tracking VARCHAR(32500), rank INT(3));
			DESCRIBE users;
			
Modules/packages : modules used when hosting web server
	Flask : web framework, medium level
		from flask import Flask, render_template, request, url_for, redirect, session
		from flask import flash, send_file, send_from_directory, jsonify
	PyMySQL : database conncector module, MySQL Python3
		import pymysql
		def connect():
			conn = pymysql.connect(...)
			c = conn.cursor()
			return c, conn
	flask_WTF : flask form module, http://flask.pocoo.org/docs/0.10/patterns/wtforms/
		from wtforms import Form, validators, BooleanField, StringField, PasswordField
		class RegisterForm(Form):
			...
	passlib : security module, password encryption
		from passlib.hash import sha256_crypt
		hash = sha256_crypt.encrypt(password)
		sha256_crypt.verify(hash, password)
	functools : wrapper
		from functools import wraps
	gc : memory management
		import gc
		gc.collect()
	Flask-Mail : flask SMTP
		https://pythonhosted.org/Flask-Mail/
		from flask_mail import Mail, Message
		app.config.update(
			MAIL_SERVER=smtp...,
			MAIL_PORT=465,
			MAIL_USE_SSL=True,
			MAIL_USERNAME=...,
			MAIL_PASSWORD=...
		)
		mail = Mail(app)
		...
		msg = Message("flask mail title", sender=..., recipients=[...])
		msg.body = "flask mail content"
		msg.html = render_template()
		mail.send(msg)
	pygal : web graph, SVG
		http://pygal.org/en/stable/
		python
			import pygal
			@app.route('/graph/')
			def graph():
				_chart = pygal.Line()
				_chart...
				chart = _chart.render_data_uri()
				return render_template('part2/graph.html', chart=chart, root_path=root_path)
		html
			<embed type="image/svg+xml" src= {{ chart }} />