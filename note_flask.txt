intro
	from flask import Flask
	app = Flask(__name__)
	...
	routed functions
	...
	if __name__ == '__main__':
		app.run(debug=True)

routing : link url to a function, for forms add post method
	@app.route('/author')
	def author():
    		return '<h2>Blitz love Python!</h2>'
	@app.route('/login/', methods=["GET","POST"])
	def login_page():
    		return render_template("login.html")

error handling
	@app.errorhandler(404)
	def error_404(error):
		return render_template('error.html', error = error, error_msg = "Opps that page doesn't exist.")

passing variables : url with variable
	@app.route('/post/<int:post_id>')
	def post(post_id):
		return "This is the contend of post {}".format(post_id)

HTTP methods : post get
	from flask import Flask, request
	@app.route('/methods', methods=['GET', 'POST'])
	def methods():
		if request.method == 'POST':
			return "Your request method is POST"
		else:
			return '''Your request method is GET
			<form action='/methods' method='POST'>
				Press OK!<br>
				<input type='submit' value='OK'/>
			</form>'''

Redirect : sending user to another URL
	from flask import Flask, redirect, url_for
	@app.route('/jumped/')
	def landed():
		return 'I jumped!'
	@app.route('/jump/')
	def jump_page():
		return redirect(url_for('landed'))

HTML files
	code
		from flask import Flask, render_template
		@app.route('/profile/<name>')
		def profile(name):
			return render_template("profile.html", name=name)
	templates/profile.html
		<!DOCTYPE html>
		<title>{{name}}'s home</title>
		<link rel="stylesheet" type="text/css" href="{{url_for('static', filename='style.css')}}">
		<h1>{{name}}</h1>
		<h2>Welcome back!</h2>
	static/style.css
		h2 {color: deepskyblue;}
	HTML scripting
		{{ ... }} : variable passed from python to html
		{% ... %} : Python code in html
			{% if ... %}
			...html...
			{% else %}
			{% endif %}
			{% for ... %}
			...html...
			{% endfor %}
			{% with ... %}
			{% endwith %}
	Page extension/inheritance
		Get other page add extra and use it1
		{% extends 'parent.html' %} : get and use parent.html template as child template
		{% block body %} : use parent code before block
		child html : use child code within block
		{% endblock %} : use parent code after block

Flash
	.py
		flash('message to display')
	.html
		{% with flash_msgs = get_flashed_messages() %}
		{% if flash_msgs %}
		{% for msg in flash_msgs%}
		{{ msg }}
		{% endfor%}
		{% endif%}
		{% endwith %}

flask_wtf : flask form module
	from wtforms import Form, validators, BooleanField, StringField, PasswordField
	create custom class with Form as parent

Hosting
	Tools
		PuTTY, Win-SCP
	Note
		File encoding : utf-8
		Win-SCP permission
			Advanced-Environment-SCP/Shell-Shell sudo su -
		Code change server auto reload
			app.config.update(TEMPLATES_AUTO_RELOAD = True)
		Routing
			End URL with '/' : accepts URL request both with or without ending '/'
			Multi routing : can route multiple URL to same function
		Import
			When importing modules add '.' infront of module name
		Pip
			pip search ...
	Default
		sudo apt-get update
		sudo apt-get upgrade
		sudo apt-get install apache2 mysql-client mysql-server
	Python3
		sudo apt-get install python3 python3-pip libapache2-mod-wsgi-py3
		sudo ln -s /usr/bin/python3 /usr/bin/python
		sudo a2enmod wsgi
	Virtual environment
		Setup : in project directory /var/www/FlaskApp/FlaskApp/
			sudo pip3 install virtualenv
			sudo virtualenv venv
			sudo chown -R ubuntu:ubuntu venv
		Install packages in venv
			source venv/bin/activate
			pip3 install ...
			deactivate
		Packages
			Flask : web framework
			PyMySQL : database conncector module, MySQL Python3 
			flask-WTF : flask form module
			passlib : security module, password encryption
				Flask-local : check Flask working in venv
		Files
			/var/www/FlaskApp/FlaskApp
				static/ templates/ __init__.py
		python __init__.py
	Flask-web : when Flask-local works
		Files
			/etc/apache2/sites-available/FlaskApp.conf
			/var/www/FlaskApp/flaskapp.wsgi
		sudo service apache2 restart
		check public ip on browser
	MySQL : database for storing data
		Login : sudo mysql -u root -p
		Reset root password
			https://support.rackspace.com/how-to/mysql-resetting-a-lost-mysql-root-password/
		DB
			SHOW DATABASES;
			CREATE DATABASE pythonprogramming;
			USE pythonprogramming
			CREATE TABLE users (uid INT(11) AUTO_INCREMENT PRIMARY KEY, username VARCHAR(20), password VARCHAR(100), email VARCHAR(50), settings VARCHAR(32500), tracking VARCHAR(32500), rank INT(3));
			DESCRIBE users;
		Python
			import pymysql
			def connect():
				conn = pymysql.connect(host='localhost', user='root', password='mysql', db='pythonprogramming')
				c = conn.cursor()
				return c, conn

Bootstrap
	Overview
		Front end, CSS & JavaScript framework by Twitter
		Used to spice up webpage
		Include jQuery and bootstrap javascript
	navbar button glyphicon modal video picture nav-tabs alert