string
    concatenation
        names = ["Jeff", "Gary", "Jill", "Samantha"]
        print(", ".join(names))
    format
        who = "Gary"
        how_many = 12
        print("{} bought {} apples today!".format(who, how_many))
        print("{f1} bought {f2} apples today!".format(f2=how_many, f1=who))

argparse : argument parser, often used in CLI
    import argpasre
    def parse():
        parser = argparse.ArgumentParser()
        parser.add_argument("--x", type=float, default=1.0, help="first number")
        parser.add_argument("--y", type=float, default=1.0, help="second number")
        parser.add_argument("--operation", type=str, default="add", help="operation (add, sub, mul, div)")
        args = parser.parse_args()
        print(args)

list comprehension, generator expression
    overview
        list : fast but use memory, problems on huge iterations
        generator : don't use memory, can be slower, works on huge iterations
    code
        list1 = [i for i in range(50000000)]
        print("List1", list1[-10:])
        generator1 = (i for i in range(50000000))
        print("Generator1", generator1)
        list2 = [i for i in generator1]
        print("List2", list2[:10])
